@using Shop.Shared

<div class="col-xl-3 col-lg-6 col-xs-12 p-2" style="max-height: 250px;">
    <a href="/product/@Product.id" class="card card-hover h-100 w-100 d-flex flex-column justify-content-between" style="color: #000; text-decoration: none;">
        <div class="position-relative card-body p-0">
            <div class="position-relative h-100 z-1 p-3" style="background-color: rgb(255, 255, 255, .3);">
                <h5 class="card-title line-clamp-1">@*id:@Product.id - *@@Product.name</h5>
                <p class="card-text line-clamp-2 mb-0">@Product.description</p>
            </div>
           
            @if (!string.IsNullOrEmpty(Product.image_url))
            {
                <img src="@Product.image_url" class="card-img h-100 rounded-bottom-0 position-absolute z-0 top-0 start-0 end-0 opacity-25 object-fit-cover">
            }
        </div>
        <div class="card-footer">

                <div class="card-text text-capitalize  fw-light">@Product.game @Product.category</div>
                <div class="card-text fw-light">Quantity: <span class="fw-semibold">@Product.quantity</span></div>
        
            <div class="d-flex justify-content-between">
                <div class="card-text fw-light">Seller: <span class="fw-semibold">@Product.created_by</span></div>
                <div class="card-text fw-semibold">$@Product.price</div>
            </div>
        </div>
    </a>
</div>


@code {
    [Parameter]
    public Product Product { get; set; } = null!;

    [Parameter]
    public EventCallback<int> OnDelete { get; set; }

    private async Task DeleteProduct()
    {
        if (OnDelete.HasDelegate)
        {
            await OnDelete.InvokeAsync(Product.id);
        }
    }
}
