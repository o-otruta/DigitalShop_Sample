@page "/product/{id:int}"
@using Shop.Shared
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Product Details</h3>

@if (product == null)
{
    <p>Loading product details...</p>
}
else
{
    <div class="card flex-row">
        <div class="position-relative col-4">
            <img src="@product.image_url" class="card-img h-100 object-fit-cover" alt="@product.name" />
            @if (CanEdit && editingField == "image_url")
            {
                <div class="position-absolute top-0 start-0 w-100 p-2" style="background: rgba(255,255,255,0.8);">
                    <input @bind="product.image_url" class="form-control" placeholder="Enter image URL" />
                    <button class="btn btn-success btn-sm mt-2" @onclick="() => SaveField()">Save</button>
                    <button class="btn btn-secondary btn-sm mt-2" @onclick="CancelEdit">Cancel</button>
                </div>
            }
            else if (CanEdit)
            {
                <button class="btn btn-secondary btn-sm position-absolute top-0 end-0 m-2" @onclick='() => EditField("image_url")'>
                    <i class="bi bi-pencil-square"></i>
                </button>
            }
        </div>
        <div class="card-body">
            <h5 class="card-title">
                @if (editingField == "name")
                {
                    <input @bind="product.name" class="form-control" />
                    <button class="btn btn-success btn-sm ms-2" @onclick="() => SaveField()">Save</button>
                    <button class="btn btn-secondary btn-sm ms-1" @onclick="CancelEdit">Cancel</button>
                }
                else
                {
                    @product.name
                    @if (CanEdit)
                    {
                        <button class="btn btn-outline-secondary btn-sm ms-2" @onclick='() => EditField("name")'>
                            <i class="bi bi-pencil-square"></i>
                        </button>
                    }
                }
            </h5>
            <p class="card-text">
                <strong>Price: </strong>
                @if (editingField == "price")
                {
                    <input @bind="product.price" type="number" class="form-control d-inline w-auto" />
                    <button class="btn btn-success btn-sm ms-2" @onclick="() => SaveField()">Save</button>
                    <button class="btn btn-secondary btn-sm ms-1" @onclick="CancelEdit">Cancel</button>
                }
                else
                {
                    <span>$</span>@product.price
                    @if (CanEdit)
                    {
                    <button class="btn btn-outline-secondary btn-sm ms-2" @onclick='() => EditField("price")'>
                        <i class="bi bi-pencil-square"></i>
                    </button>
                    }
                }
            </p>
            <p class="card-text">
                <strong>Quantity: </strong>
                @if (editingField == "quantity")
                {
                    <input @bind="product.quantity" type="number" class="form-control d-inline w-auto" />
                    <button class="btn btn-success btn-sm ms-2" @onclick="() => SaveField()">Save</button>
                    <button class="btn btn-secondary btn-sm ms-1" @onclick="CancelEdit">Cancel</button>
                }
                else
                {
                    @product.quantity
                    @if (CanEdit)
                    {
                    <button class="btn btn-outline-secondary btn-sm ms-2" @onclick='() => EditField("quantity")'>
                        <i class="bi bi-pencil-square"></i>
                    </button>
                    }
                }
            </p>
            <p class="card-text">
                <strong>Description: </strong>
                @if (editingField == "description")
                {
                    <textarea @bind="product.description" class="form-control"></textarea>
                    <button class="btn btn-success btn-sm ms-2" @onclick="() => SaveField()">Save</button>
                    <button class="btn btn-secondary btn-sm ms-1" @onclick="CancelEdit">Cancel</button>
                }
                else
                {
                    @product.description
                    @if (CanEdit)
                    {
                    <button class="btn btn-outline-secondary btn-sm ms-2" @onclick='() => EditField("description")'>
                        <i class="bi bi-pencil-square"></i>
                    </button>
                    }
                }
            </p>
            <p class="card-text"><strong>Game:</strong> @product.game</p>
            <p class="card-text text-capitalize"><strong>Category:</strong> @product.category</p>
            <p class="card-text"><strong>Created by:</strong> @product.created_by</p>
            <button @onclick="GoBack" class="btn btn-secondary">Back to Products</button>

            @if (product?.created_by != currentUser && currentUser != null)
            {
            <button class="btn btn-primary ms-2" @onclick="OpenPurchaseModal">Buy Now</button>
            <OrderModal IsOpen="@isPurchaseModalOpen" Product="product" OnClose="ClosePurchaseModal" />
            }

            @if (CanEdit)
            {
                <button @onclick="DeleteProduct" class="btn btn-danger">Delete Product</button>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int id { get; set; }

    private Product? product;
    private string? currentUser;
    private string? currentRole;
    private bool CanEdit => currentRole == "Admin" || product?.created_by == currentUser;
    private string? editingField;

    protected override async Task OnInitializedAsync()
    {

        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token))
        {
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        }

        currentUser = await LocalStorage.GetItemAsync<string>("Username");
        currentRole = await LocalStorage.GetItemAsync<string>("Role");

        await LoadProduct();
    }

    private async Task LoadProduct()
    {
        try
        {
            product = await Http.GetFromJsonAsync<Product>($"api/products/{id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading product: {ex.Message}");
        }
    }

    private async Task EditField(string fieldName)
    {
        if (!string.IsNullOrEmpty(editingField))
        {
            await CancelEdit();
        }

        editingField = fieldName;
    }

    private async Task CancelEdit()
    {
        await LoadProduct();
        editingField = null;
    }

    private async Task SaveField()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/products/{id}", product);
            if (response.IsSuccessStatusCode)
            {
                editingField = null;
            }
            else
            {
                Console.WriteLine($"Error saving product: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving product: {ex.Message}");
        }
    }

    private async Task DeleteProduct()
    {
        try
        {
            var response = await Http.DeleteAsync($"api/products/{id}");
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/products");
            }
            else
            {
                Console.WriteLine($"Error deleting product: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting product: {ex.Message}");
        }
    }

    private bool isPurchaseModalOpen = false;

    private void OpenPurchaseModal()
    {
        isPurchaseModalOpen = true;
    }

    private void ClosePurchaseModal(bool isOpen)
    {
        isPurchaseModalOpen = isOpen;
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/products");
    }
}